from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import Command
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.filters.callback_data import CallbackData
import asyncio


BOT_TOKEN =
ADMIN_ID =
ADMIN_ID_2 = 

bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()


keys_users = [

]


pending_payments = {}

class PaymentCallback(CallbackData, prefix="payment"):
    action: str
    user_id: int

@dp.message(Command("start"))
async def start_message(message: Message):
    btn_buy_program = InlineKeyboardButton(text="–ö—É–ø–∏—Ç—å –ø—Ä–æ–≥—Ä–∞–º–º—Éüíé", callback_data="btn_buy_program")
    btn_faq = InlineKeyboardButton(text="FAQ‚ùì", callback_data="btn_faq")
    btn_team = InlineKeyboardButton(text="–ö–æ–º–∞–Ω–¥–∞ smartPCüíª", callback_data="btn_team")
    markup = InlineKeyboardMarkup(inline_keyboard=[
        [btn_buy_program],
        [btn_team, btn_faq]
    ])

    global keys_users
    user_id = message.from_user.id
    username = message.from_user.username or "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"

    await bot.send_message(
        ADMIN_ID_2,
        f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{username}:\n"
        f"–ó–∞—à—ë–ª ‚úÖ"
    )

    text = (
        """
üöÄ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Pay Control | Lexium!

–í—ã –Ω–∞ –ø–æ—Ä–æ–≥–µ –Ω–æ–≤—ã—Ö –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π. –î–ª—è —Ç–æ–≥–æ —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å, –≤—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–∏–∂–µ:"""
    )
    await message.answer(text, reply_markup=markup)

@dp.callback_query(F.data == 'btn_back_start')
async def back_start(call: CallbackQuery):
    await call.message.delete()
    await start_message(call.message)

@dp.callback_query(lambda call: call.data == 'btn_faq')
async def faq(call: types.CallbackQuery):
    await call.message.delete()
    btn_back_start = InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="btn_back_start")
    markup_faq = InlineKeyboardMarkup(inline_keyboard=[[btn_back_start]])
    text_faq = (
        "‚ùì <b>–ß–∞—Å—Ç–æ –∑–∞–¥–∞–≤–∞–µ–º—ã–µ –≤–æ–ø—Ä–æ—Å—ã</b> ‚ùì\n\n"
        "‚Ä¢ <b>–ß—Ç–æ —è –ø–æ–ª—É—á—É –ø–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã?</b>\n"
        "–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –≤—ã –ø–æ–ª—É—á–∏—Ç–µ —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∫–ª—é—á, –∫–æ—Ç–æ—Ä—ã–π –≤–∞–º –ø–æ–Ω–∞–¥–æ–±–∏—Ç—å—Å—è, —á—Ç–æ–±—ã –∑–∞–ø—É—Å—Ç–∏—Ç—å smartPC Pro, –∞ —Ç–∞–∫–∂–µ —Å—Å—ã–ª–∫—É-–ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –≤ –≥—Ä—É–ø–ø—É, –≥–¥–µ –Ω–∞–π–¥–µ—Ç–µ –ø–æ–¥—Ä–æ–±–Ω—É—é –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é –ø–æ —É—Å—Ç–∞–Ω–æ–≤–∫–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã –∏ –æ—Ç–≤–µ—Ç—ã –Ω–∞ –ø–æ–ø—É–ª—è—Ä–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã.\n\n"
        "‚Ä¢ <b>–ù–∞ –∫–∞–∫–æ–π –æ–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω–æ–π —Å–∏—Å—Ç–µ–º–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –ø—Ä–æ–≥—Ä–∞–º–º–∞?</b>\n"
        "–ü—Ä–æ–≥—Ä–∞–º–º–∞ —Å–æ–≤–º–µ—Å—Ç–∏–º–∞ —Å Windows.\n\n"
        "‚Ä¢ <b>–ù–∞—Å–∫–æ–ª—å–∫–æ —Å–ª–æ–∂–Ω–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∞?</b>\n"
        "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø—Ä–æ—Å—Ç–∞ –∏ –ø–æ–Ω—è—Ç–Ω–∞, –µ—Å–ª–∏ —Å–ª–µ–¥–æ–≤–∞—Ç—å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏, –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω–æ–π –≤ –≥—Ä—É–ø–ø–µ.\n\n"
        "‚Ä¢ <b>–ü–æ–¥–æ–π–¥–µ—Ç –ª–∏ –ø—Ä–æ–≥—Ä–∞–º–º–∞ –¥–ª—è —Å–ª–∞–±–æ–≥–æ –ü–ö?</b>\n"
        "–î–∞, –ø—Ä–æ–≥—Ä–∞–º–º–∞ —Ä–∞–∑—Ä–∞–±–æ—Ç–∞–Ω–∞ —Ç–∞–∫, —á—Ç–æ–±—ã –Ω–µ –Ω–∞–≥—Ä—É–∂–∞—Ç—å –≤–∞—à –∫–æ–º–ø—å—é—Ç–µ—Ä –∏ —Ä–∞–±–æ—Ç–∞—Ç—å –¥–∞–∂–µ –Ω–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞—Ö —Å –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–º–∏ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞–º–∏.\n\n"
        "‚Ä¢ <b>–ß—Ç–æ –¥–µ–ª–∞—Ç—å, –µ—Å–ª–∏ –≤–æ–∑–Ω–∏–∫–ª–∏ –≤–æ–ø—Ä–æ—Å—ã –∏–ª–∏ –ø—Ä–æ–±–ª–µ–º—ã?</b>\n"
        "–ï—Å–ª–∏ —É –≤–∞—Å –ø–æ—è–≤–∏–ª–∏—Å—å –≤–æ–ø—Ä–æ—Å—ã, –≤—ã –≤—Å–µ–≥–¥–∞ –º–æ–∂–µ—Ç–µ –æ–±—Ä–∞—Ç–∏—Ç—å—Å—è –≤ —Ç–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫—É.\n\n"
        "üí° –ï—Å–ª–∏ –≤–∞—à –≤–æ–ø—Ä–æ—Å –Ω–µ –æ—Å–≤–µ—â—ë–Ω –∑–¥–µ—Å—å, –Ω–µ —Å—Ç–µ—Å–Ω—è–π—Ç–µ—Å—å —Å–ø—Ä–∞—à–∏–≤–∞—Ç—å –Ω–∞–ø—Ä—è–º—É—é!"
    )

    await call.message.answer(text_faq, parse_mode="HTML", reply_markup=markup_faq)


@dp.callback_query(lambda call: call.data == 'btn_team')
async def team(call: types.CallbackQuery):
    await call.message.delete()
    btn_back_start = InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="btn_back_start")
    markup_team = InlineKeyboardMarkup(inline_keyboard=[[btn_back_start]])

    text = (
        "üë®‚Äçüíª <b>–û—Å–Ω–æ–≤–∞—Ç–µ–ª—å –∏ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫:</b> @lexium_official\n"
        "üõ† <b>–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä:</b> @EpochaShopES\n"
        "üì© <b>–¢–µ—Ö-–ø–æ–¥–¥–µ—Ä–∂–∫–∞:</b> @zdxdq\n\n"
        "–ï—Å–ª–∏ —É –≤–∞—Å –≤–æ–∑–Ω–∏–∫–ª–∏ –≤–æ–ø—Ä–æ—Å—ã –∏–ª–∏ –ø—Ä–æ–±–ª–µ–º—ã, –Ω–µ —Å—Ç–µ—Å–Ω—è–π—Ç–µ—Å—å –æ–±—Ä–∞—â–∞—Ç—å—Å—è! üòä"
    )

    await call.message.answer(text, parse_mode="HTML", reply_markup=markup_team)


@dp.callback_query(F.data == "btn_buy_program")
async def buy_program(call: CallbackQuery):
    await call.message.delete()
    btn_back_start = InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="btn_back_start")
    smartpc_pro = InlineKeyboardButton(text="smartPC Pro üíé", callback_data="smartpc_pro")
    markup_buy_program = InlineKeyboardMarkup(inline_keyboard=[[btn_back_start],
                                                               [smartpc_pro]])

    await call.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–µ–∫—Ç, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å —Ä–µ–∫–≤–∏–∑–∏—Ç—ã:", reply_markup=markup_buy_program)
    await call.answer()


@dp.callback_query(lambda call: call.data == 'smartpc_pro')
async def send_payment_info(call: CallbackQuery):
    await call.message.delete()
    btn_back_main = InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="btn_back_main")
    btn_sberbank = InlineKeyboardButton(text="–°–±–µ—Ä–±–∞–Ω–∫ üá∑üá∫", callback_data="btn_sberbank")
    btn_crypto = InlineKeyboardButton(text="–ö—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞ üí∞", callback_data="btn_crypto")
    btn_sbp = InlineKeyboardButton(text="–°–ë–ü üá∑üá∫", callback_data="btn_sbp")
    markup_main = InlineKeyboardMarkup(inline_keyboard=[
        [btn_back_main],
        [btn_sberbank],
        [btn_crypto],
        [btn_sbp]])

    user_id = call.from_user.id
    username = call.from_user.username or "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"

    await bot.send_message(
        ADMIN_ID_2,
        f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{username}:\n"
        f"smartPC Pro ‚úÖ"
    )


    await call.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ —Å–ø–æ—Å–æ–±–æ–≤ –æ–ø–ª–∞—Ç—ã:", reply_markup=markup_main)
    await call.answer()

@dp.callback_query(F.data == 'btn_back_main')
async def back_main(call: CallbackQuery):
    await start_message(call.message)

@dp.callback_query(lambda call: call.data == 'btn_sberbank')
async def sberbank(call: types.CallbackQuery):
    await call.message.delete()
    btn_back_sberbank = InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="btn_back_sberbank")
    markup_sberbank = InlineKeyboardMarkup(inline_keyboard=[[btn_back_sberbank]])

    text = (
        "üí∏ *–û–ø–ª–∞—Ç–∞ —á–µ—Ä–µ–∑ –°–±–µ—Ä–±–∞–Ω–∫* üí∏\n\n"
        "üí∞ *–¶–µ–Ω–∞:*\n"
        "‚Ä¢ 333 ‚ÇΩ\n\n"
        "üí≥ *–†–µ–∫–≤–∏–∑–∏—Ç—ã –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞:*\n"
        "`2202208100738021` (–î–º–∏—Ç—Ä–∏–π –ò–≥–æ—Ä–µ–≤–∏—á)\n\n"
        "üì∏ *–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã:* –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—é–¥–∞ —Å–∫—Ä–∏–Ω—à–æ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è!\n\n"
        "üîî _–û–ø–ª–∞—Ç–∞ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç—Å—è –≤–ª–∞–¥–µ–ª—å—Ü–µ–º._"
    )

    await call.message.answer(text, parse_mode="Markdown", reply_markup=markup_sberbank)



@dp.callback_query(F.data == 'btn_back_sberbank')
async def back_sberbank(call: CallbackQuery):
    await send_payment_info(call)


@dp.callback_query(lambda call: call.data == 'btn_crypto')
async def crypto(call: types.CallbackQuery):
    await call.message.delete()
    btn_back = InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="btn_back")
    btn_ton = InlineKeyboardButton(text="üíé TON", callback_data="btn_ton")
    btn_usdt_trc = InlineKeyboardButton(text="üí∞ USDT (TRC-20)", callback_data="btn_usdt_trc")
    btn_usdt_erc = InlineKeyboardButton(text="üí∞ USDT (ERC-20)", callback_data="btn_usdt_erc")
    btn_btc = InlineKeyboardButton(text="‚Çø Bitcoin", callback_data="btn_btc")
    btn_eth = InlineKeyboardButton(text="üåê Ethereum", callback_data="btn_eth")
    markup_crypto = InlineKeyboardMarkup(inline_keyboard=[
        [btn_back],
        [btn_ton],
        [btn_usdt_trc],
        [btn_usdt_erc],
        [btn_btc],
        [btn_eth]])
    await call.message.answer("""–í—ã–±–µ—Ä–∏—Ç–µ:\n
""", reply_markup=markup_crypto)


@dp.callback_query(F.data == 'btn_back')
async def go_back_ru(call: CallbackQuery):
    await send_payment_info(call)


@dp.callback_query(lambda call: call.data == 'btn_ton')
async def ton(call: types.CallbackQuery):
    await call.message.delete()
    btn_back = InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="btn_back_crypto")
    markup_ton = InlineKeyboardMarkup(inline_keyboard=[[btn_back]])

    text = (
        "üí≥ *–û–ø–ª–∞—Ç–∞ TON* üí≥\n\n"
        "üí∞ *–¶–µ–Ω–∞:*\n"
        "‚Ä¢ 333 ‚ÇΩ\n"
        "‚Ä¢ 3,27 $\n\n"
        "üíé *–ê–¥—Ä–µ—Å –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞:*\n"
        "`UQA6TbltoThT6ekDec-DdZEetcrSP5ouAdfmAKjvadIG_Yh5`\n\n"
        "üì∏ *–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã:* –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—é–¥–∞ —Å–∫—Ä–∏–Ω—à–æ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è!\n\n"
        "üîî _–û–ø–ª–∞—Ç–∞ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç—Å—è –≤–ª–∞–¥–µ–ª—å—Ü–µ–º._"
    )

    await call.message.answer(text, parse_mode="Markdown", reply_markup=markup_ton)


@dp.callback_query(lambda call: call.data == 'btn_usdt_trc')
async def usdt_trc(call: types.CallbackQuery):
    await call.message.delete()
    btn_back = InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="btn_back_crypto")
    markup_usdt_trc = InlineKeyboardMarkup(inline_keyboard=[[btn_back]])

    text = (
        "üí≥ *–û–ø–ª–∞—Ç–∞ USDT (TRC-20)* üí≥\n\n"
        "üí∞ *–¶–µ–Ω–∞:*\n"
        "‚Ä¢ 333 ‚ÇΩ\n"
        "‚Ä¢ 3,27 $\n\n"
        "üíé *–ê–¥—Ä–µ—Å –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞:*\n"
        "`TG4daRPUtsX6oyMJ9T1APq5Nyoq74iFCUU`\n\n"
        "üì∏ *–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã:* –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—é–¥–∞ —Å–∫—Ä–∏–Ω—à–æ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è!\n\n"
        "üîî _–û–ø–ª–∞—Ç–∞ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç—Å—è –≤–ª–∞–¥–µ–ª—å—Ü–µ–º._"
    )

    await call.message.answer(text, parse_mode="Markdown", reply_markup=markup_usdt_trc)


@dp.callback_query(lambda call: call.data == 'btn_usdt_erc')
async def usdt_erc(call: types.CallbackQuery):
    await call.message.delete()
    btn_back = InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="btn_back_crypto")
    markup_usdt_erc = InlineKeyboardMarkup(inline_keyboard=[[btn_back]])

    text = (
        "üí≥ *–û–ø–ª–∞—Ç–∞ USDT (ERC-20)* üí≥\n\n"
        "üí∞ *–¶–µ–Ω–∞:*\n"
        "‚Ä¢ 333 ‚ÇΩ\n"
        "‚Ä¢ 3,27 $\n\n"
        "üíé *–ê–¥—Ä–µ—Å –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞:*\n"
        "`0xb7363a19645a008db430d37c2ad40cbeddf21805`\n\n"
        "üì∏ *–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã:* –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—é–¥–∞ —Å–∫—Ä–∏–Ω—à–æ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è!\n\n"
        "üîî _–û–ø–ª–∞—Ç–∞ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç—Å—è –≤–ª–∞–¥–µ–ª—å—Ü–µ–º._"
    )

    await call.message.answer(text, parse_mode="Markdown", reply_markup=markup_usdt_erc)


@dp.callback_query(lambda call: call.data == 'btn_btc')
async def btc(call: types.CallbackQuery):
    await call.message.delete()
    btn_back = InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="btn_back_crypto")
    markup_btc = InlineKeyboardMarkup(inline_keyboard=[[btn_back]])

    text = (
        "üí∞ *–û–ø–ª–∞—Ç–∞ Bitcoin* üí∞\n\n"
        "üí∞ *–¶–µ–Ω–∞:*\n"
        "‚Ä¢ 333 ‚ÇΩ\n"
        "‚Ä¢ 3,27 $\n\n"
        "üîë *–ê–¥—Ä–µ—Å –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞:*\n"
        "`1KXSoU7ojt3i4NoKh5BueAK1m9PGcEUEaT`\n\n"
        "üì∏ *–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã:* –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—é–¥–∞ —Å–∫—Ä–∏–Ω—à–æ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è!\n\n"
        "üîî _–û–ø–ª–∞—Ç–∞ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç—Å—è –≤–ª–∞–¥–µ–ª—å—Ü–µ–º._"
    )

    await call.message.answer(text, parse_mode="Markdown", reply_markup=markup_btc)


@dp.callback_query(lambda call: call.data == 'btn_eth')
async def eth(call: types.CallbackQuery):
    await call.message.delete()
    btn_back = InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="btn_back_crypto")
    markup_eth = InlineKeyboardMarkup(inline_keyboard=[[btn_back]])

    text = (
        "üí∞ *–û–ø–ª–∞—Ç–∞ Ethereum (ERC-20)* üí∞\n\n"
        "üí∞ *–¶–µ–Ω–∞:*\n"
        "‚Ä¢ 333 ‚ÇΩ\n"
        "‚Ä¢ 3,27 $\n\n"
        "üîë *–ê–¥—Ä–µ—Å –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞:*\n"
        "`0xb7363a19645a008db430d37c2ad40cbeddf21805`\n\n"
        "üì∏ *–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã:* –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—é–¥–∞ —Å–∫—Ä–∏–Ω—à–æ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è!\n\n"
        "üîî _–û–ø–ª–∞—Ç–∞ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç—Å—è –≤–ª–∞–¥–µ–ª—å—Ü–µ–º._"
    )

    await call.message.answer(text, parse_mode="Markdown", reply_markup=markup_eth)


@dp.callback_query(F.data == 'btn_back_crypto')
async def go_back_ru(call: CallbackQuery):
    await crypto(call)

@dp.callback_query(lambda call: call.data == 'btn_sbp')
async def sbp(call: types.CallbackQuery):
    await call.message.delete()
    btn_back_sbp = InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="btn_back_sbp")
    markup_sbp = InlineKeyboardMarkup(inline_keyboard=[[btn_back_sbp]])

    text = (
        "üí∏ *–û–ø–ª–∞—Ç–∞ —á–µ—Ä–µ–∑ –°–ë–ü* üí∏\n\n"
        "üí∞ *–¶–µ–Ω–∞:*\n"
        "‚Ä¢ 333 ‚ÇΩ\n\n"
        "üì± *–ù–æ–º–µ—Ä –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞:*\n"
        "–°–ø—Ä–∞—à–∏–≤–∞–π—Ç–µ —É @lexium_official\n\n"
        "üì∏ *–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã:* –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—é–¥–∞ —Å–∫—Ä–∏–Ω—à–æ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è!\n\n"
        "üîî _–û–ø–ª–∞—Ç–∞ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç—Å—è –≤–ª–∞–¥–µ–ª—å—Ü–µ–º._"
    )
    text = text.replace('*', '\\*').replace('_', '\\_')
    await call.message.answer(text, parse_mode="Markdown", reply_markup=markup_sbp)



@dp.callback_query(F.data == 'btn_back_sbp')
async def back_sbp(call: CallbackQuery):
    await send_payment_info(call)


user_payments = {}  # –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π


@dp.message(F.photo)
async def handle_payment_confirmation(message: Message):
    user_id = message.from_user.id
    username = message.from_user.username or "–±–µ–∑ username"

    if user_id not in pending_payments:
        pending_payments[user_id] = message.photo[-1].file_id

        user_payments[user_id] = {"username": username, "status": "–ù–∞ –ø—Ä–æ–≤–µ—Ä–∫–µ"}

        await message.answer("–í–∞—à–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É. –û–∂–∏–¥–∞–π—Ç–µ –æ—Ç–≤–µ—Ç–∞.")

        markup = InlineKeyboardMarkup(
            inline_keyboard=[
                [
                    InlineKeyboardButton(
                        text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å",
                        callback_data=PaymentCallback(action="confirm", user_id=user_id).pack(),
                    ),
                    InlineKeyboardButton(
                        text="‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å",
                        callback_data=PaymentCallback(action="decline", user_id=user_id).pack(),
                    ),
                ]
            ]
        )

        await bot.send_photo(
            ADMIN_ID,
            photo=message.photo[-1].file_id,
            caption=f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{username} –æ—Ç–ø—Ä–∞–≤–∏–ª –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ–ø–ª–∞—Ç—ã. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ!",
            reply_markup=markup,
        )
    else:
        await message.answer("–í—ã —É–∂–µ –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ. –û–∂–∏–¥–∞–π—Ç–µ –ø—Ä–æ–≤–µ—Ä–∫–∏.")


@dp.callback_query(PaymentCallback.filter(F.action.in_({"confirm", "decline"})))
async def handle_admin_response(call: CallbackQuery, callback_data: PaymentCallback):
    global keys_users
    user_id = callback_data.user_id
    action = callback_data.action

    if user_id in pending_payments:
        del pending_payments[user_id]

        if action == "confirm":
            user_payments[user_id]["status"] = "–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ"

            if keys_users:
                key = keys_users.pop(0)

                open_link_button = InlineKeyboardButton(
                    text="üîó –ì—Ä—É–ø–ø–∞ smartPC Pro",
                    url="https://t.me/+xvy47aDrN8s0ZTQy"
                )
                markup = InlineKeyboardMarkup(inline_keyboard=[
                    [open_link_button]
                ])

                await bot.send_message(
                    user_id,
                    f"‚úÖ <b>–í–∞—à–∞ –æ–ø–ª–∞—Ç–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞!</b>\n\n"
                    f"–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–∫—É–ø–∫—É ‚ù§Ô∏è\n\n"
                    f"<b>–í–∞—à –∫–ª—é—á:</b>\n<code>{key}</code>\n\n"
                    f"üîí <i>(–ù–∏–∫–æ–º—É –Ω–µ —Å–æ–æ–±—â–∞–π—Ç–µ –µ–≥–æ!)</i>",
                    reply_markup=markup,
                    parse_mode="HTML"
                )

                await call.message.edit_caption(
                    f"{call.message.caption}\n\n‚úÖ –û–ø–ª–∞—Ç–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞.\nüîë –í–∞—à –∫–ª—é—á: <code>{key}</code>",
                    parse_mode="HTML"
                )

                await bot.send_message(
                    ADMIN_ID,
                    f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{user_payments[user_id]['username']}:\n"
                    f"–°—Ç–∞—Ç—É—Å: {user_payments[user_id]['status']} ‚úÖ\n"
                    f"üîë –ö–ª—é—á: <code>{key}</code>",
                    parse_mode="HTML"
                )
            else:
                await bot.send_message(user_id, "–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–æ –∫–ª—é—á–∏ –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å. –°–≤—è–∂–∏—Ç–µ—Å—å —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π.")
                await call.message.edit_caption(
                    call.message.caption + "\n‚ö†Ô∏è –ö–ª—é—á–∏ –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π."
                )
        elif action == "decline":
            user_payments[user_id]["status"] = "–û—Ç–∫–ª–æ–Ω–µ–Ω–æ"
            await bot.send_message(user_id, "‚ùå –í–∞—à–∞ –æ–ø–ª–∞—Ç–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –∏–ª–∏ —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π.")
            await call.message.edit_caption(
                f"{call.message.caption}\n\n‚ùå –û–ø–ª–∞—Ç–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞.",
                reply_markup=None
            )

            # –õ–æ–≥ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
            await bot.send_message(
                ADMIN_ID,
                f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{user_payments[user_id]['username']}:\n"
                f"–°—Ç–∞—Ç—É—Å: {user_payments[user_id]['status']}"
            )

        await call.answer("–î–µ–π—Å—Ç–≤–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ.")
    else:
        await call.answer("–≠—Ç–æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–ª –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ.", show_alert=True)




async def main():
    await dp.start_polling(bot)

if __name__ == "__main__":
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!")
    asyncio.run(main())
